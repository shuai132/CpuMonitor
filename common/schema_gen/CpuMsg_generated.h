// automatically generated by the FlatBuffers compiler, do not modify


#ifndef FLATBUFFERS_GENERATED_CPUMSG_CPU_MONITOR_MSG_H_
#define FLATBUFFERS_GENERATED_CPUMSG_CPU_MONITOR_MSG_H_

#include "flatbuffers/flatbuffers.h"

// Ensure the included flatbuffers.h is the same version as when this file was
// generated, otherwise it may not be compatible.
static_assert(FLATBUFFERS_VERSION_MAJOR == 22 &&
              FLATBUFFERS_VERSION_MINOR == 9 &&
              FLATBUFFERS_VERSION_REVISION == 29,
             "Non-compatible flatbuffers version included");

namespace cpu_monitor {
namespace msg {

struct CpuInfo;
struct CpuInfoBuilder;
struct CpuInfoT;

struct CpuMsg;
struct CpuMsgBuilder;
struct CpuMsgT;

struct CpuInfoT : public flatbuffers::NativeTable {
  typedef CpuInfo TableType;
  std::string name{};
  float usage = 0.0f;
};

struct CpuInfo FLATBUFFERS_FINAL_CLASS : private flatbuffers::Table {
  typedef CpuInfoT NativeTableType;
  typedef CpuInfoBuilder Builder;
  enum FlatBuffersVTableOffset FLATBUFFERS_VTABLE_UNDERLYING_TYPE {
    VT_NAME = 4,
    VT_USAGE = 6
  };
  const flatbuffers::String *name() const {
    return GetPointer<const flatbuffers::String *>(VT_NAME);
  }
  float usage() const {
    return GetField<float>(VT_USAGE, 0.0f);
  }
  bool Verify(flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyOffset(verifier, VT_NAME) &&
           verifier.VerifyString(name()) &&
           VerifyField<float>(verifier, VT_USAGE, 4) &&
           verifier.EndTable();
  }
  CpuInfoT *UnPack(const flatbuffers::resolver_function_t *_resolver = nullptr) const;
  void UnPackTo(CpuInfoT *_o, const flatbuffers::resolver_function_t *_resolver = nullptr) const;
  static flatbuffers::Offset<CpuInfo> Pack(flatbuffers::FlatBufferBuilder &_fbb, const CpuInfoT* _o, const flatbuffers::rehasher_function_t *_rehasher = nullptr);
};

struct CpuInfoBuilder {
  typedef CpuInfo Table;
  flatbuffers::FlatBufferBuilder &fbb_;
  flatbuffers::uoffset_t start_;
  void add_name(flatbuffers::Offset<flatbuffers::String> name) {
    fbb_.AddOffset(CpuInfo::VT_NAME, name);
  }
  void add_usage(float usage) {
    fbb_.AddElement<float>(CpuInfo::VT_USAGE, usage, 0.0f);
  }
  explicit CpuInfoBuilder(flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  flatbuffers::Offset<CpuInfo> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = flatbuffers::Offset<CpuInfo>(end);
    return o;
  }
};

inline flatbuffers::Offset<CpuInfo> CreateCpuInfo(
    flatbuffers::FlatBufferBuilder &_fbb,
    flatbuffers::Offset<flatbuffers::String> name = 0,
    float usage = 0.0f) {
  CpuInfoBuilder builder_(_fbb);
  builder_.add_usage(usage);
  builder_.add_name(name);
  return builder_.Finish();
}

inline flatbuffers::Offset<CpuInfo> CreateCpuInfoDirect(
    flatbuffers::FlatBufferBuilder &_fbb,
    const char *name = nullptr,
    float usage = 0.0f) {
  auto name__ = name ? _fbb.CreateString(name) : 0;
  return cpu_monitor::msg::CreateCpuInfo(
      _fbb,
      name__,
      usage);
}

flatbuffers::Offset<CpuInfo> CreateCpuInfo(flatbuffers::FlatBufferBuilder &_fbb, const CpuInfoT *_o, const flatbuffers::rehasher_function_t *_rehasher = nullptr);

struct CpuMsgT : public flatbuffers::NativeTable {
  typedef CpuMsg TableType;
  std::vector<std::unique_ptr<cpu_monitor::msg::CpuInfoT>> infos{};
  CpuMsgT() = default;
  CpuMsgT(const CpuMsgT &o);
  CpuMsgT(CpuMsgT&&) FLATBUFFERS_NOEXCEPT = default;
  CpuMsgT &operator=(CpuMsgT o) FLATBUFFERS_NOEXCEPT;
};

struct CpuMsg FLATBUFFERS_FINAL_CLASS : private flatbuffers::Table {
  typedef CpuMsgT NativeTableType;
  typedef CpuMsgBuilder Builder;
  enum FlatBuffersVTableOffset FLATBUFFERS_VTABLE_UNDERLYING_TYPE {
    VT_INFOS = 4
  };
  const flatbuffers::Vector<flatbuffers::Offset<cpu_monitor::msg::CpuInfo>> *infos() const {
    return GetPointer<const flatbuffers::Vector<flatbuffers::Offset<cpu_monitor::msg::CpuInfo>> *>(VT_INFOS);
  }
  bool Verify(flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyOffset(verifier, VT_INFOS) &&
           verifier.VerifyVector(infos()) &&
           verifier.VerifyVectorOfTables(infos()) &&
           verifier.EndTable();
  }
  CpuMsgT *UnPack(const flatbuffers::resolver_function_t *_resolver = nullptr) const;
  void UnPackTo(CpuMsgT *_o, const flatbuffers::resolver_function_t *_resolver = nullptr) const;
  static flatbuffers::Offset<CpuMsg> Pack(flatbuffers::FlatBufferBuilder &_fbb, const CpuMsgT* _o, const flatbuffers::rehasher_function_t *_rehasher = nullptr);
};

struct CpuMsgBuilder {
  typedef CpuMsg Table;
  flatbuffers::FlatBufferBuilder &fbb_;
  flatbuffers::uoffset_t start_;
  void add_infos(flatbuffers::Offset<flatbuffers::Vector<flatbuffers::Offset<cpu_monitor::msg::CpuInfo>>> infos) {
    fbb_.AddOffset(CpuMsg::VT_INFOS, infos);
  }
  explicit CpuMsgBuilder(flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  flatbuffers::Offset<CpuMsg> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = flatbuffers::Offset<CpuMsg>(end);
    return o;
  }
};

inline flatbuffers::Offset<CpuMsg> CreateCpuMsg(
    flatbuffers::FlatBufferBuilder &_fbb,
    flatbuffers::Offset<flatbuffers::Vector<flatbuffers::Offset<cpu_monitor::msg::CpuInfo>>> infos = 0) {
  CpuMsgBuilder builder_(_fbb);
  builder_.add_infos(infos);
  return builder_.Finish();
}

inline flatbuffers::Offset<CpuMsg> CreateCpuMsgDirect(
    flatbuffers::FlatBufferBuilder &_fbb,
    const std::vector<flatbuffers::Offset<cpu_monitor::msg::CpuInfo>> *infos = nullptr) {
  auto infos__ = infos ? _fbb.CreateVector<flatbuffers::Offset<cpu_monitor::msg::CpuInfo>>(*infos) : 0;
  return cpu_monitor::msg::CreateCpuMsg(
      _fbb,
      infos__);
}

flatbuffers::Offset<CpuMsg> CreateCpuMsg(flatbuffers::FlatBufferBuilder &_fbb, const CpuMsgT *_o, const flatbuffers::rehasher_function_t *_rehasher = nullptr);

inline CpuInfoT *CpuInfo::UnPack(const flatbuffers::resolver_function_t *_resolver) const {
  auto _o = std::unique_ptr<CpuInfoT>(new CpuInfoT());
  UnPackTo(_o.get(), _resolver);
  return _o.release();
}

inline void CpuInfo::UnPackTo(CpuInfoT *_o, const flatbuffers::resolver_function_t *_resolver) const {
  (void)_o;
  (void)_resolver;
  { auto _e = name(); if (_e) _o->name = _e->str(); }
  { auto _e = usage(); _o->usage = _e; }
}

inline flatbuffers::Offset<CpuInfo> CpuInfo::Pack(flatbuffers::FlatBufferBuilder &_fbb, const CpuInfoT* _o, const flatbuffers::rehasher_function_t *_rehasher) {
  return CreateCpuInfo(_fbb, _o, _rehasher);
}

inline flatbuffers::Offset<CpuInfo> CreateCpuInfo(flatbuffers::FlatBufferBuilder &_fbb, const CpuInfoT *_o, const flatbuffers::rehasher_function_t *_rehasher) {
  (void)_rehasher;
  (void)_o;
  struct _VectorArgs { flatbuffers::FlatBufferBuilder *__fbb; const CpuInfoT* __o; const flatbuffers::rehasher_function_t *__rehasher; } _va = { &_fbb, _o, _rehasher}; (void)_va;
  auto _name = _o->name.empty() ? 0 : _fbb.CreateString(_o->name);
  auto _usage = _o->usage;
  return cpu_monitor::msg::CreateCpuInfo(
      _fbb,
      _name,
      _usage);
}

inline CpuMsgT::CpuMsgT(const CpuMsgT &o) {
  infos.reserve(o.infos.size());
  for (const auto &infos_ : o.infos) { infos.emplace_back((infos_) ? new cpu_monitor::msg::CpuInfoT(*infos_) : nullptr); }
}

inline CpuMsgT &CpuMsgT::operator=(CpuMsgT o) FLATBUFFERS_NOEXCEPT {
  std::swap(infos, o.infos);
  return *this;
}

inline CpuMsgT *CpuMsg::UnPack(const flatbuffers::resolver_function_t *_resolver) const {
  auto _o = std::unique_ptr<CpuMsgT>(new CpuMsgT());
  UnPackTo(_o.get(), _resolver);
  return _o.release();
}

inline void CpuMsg::UnPackTo(CpuMsgT *_o, const flatbuffers::resolver_function_t *_resolver) const {
  (void)_o;
  (void)_resolver;
  { auto _e = infos(); if (_e) { _o->infos.resize(_e->size()); for (flatbuffers::uoffset_t _i = 0; _i < _e->size(); _i++) { if(_o->infos[_i]) { _e->Get(_i)->UnPackTo(_o->infos[_i].get(), _resolver); } else { _o->infos[_i] = std::unique_ptr<cpu_monitor::msg::CpuInfoT>(_e->Get(_i)->UnPack(_resolver)); }; } } else { _o->infos.resize(0); } }
}

inline flatbuffers::Offset<CpuMsg> CpuMsg::Pack(flatbuffers::FlatBufferBuilder &_fbb, const CpuMsgT* _o, const flatbuffers::rehasher_function_t *_rehasher) {
  return CreateCpuMsg(_fbb, _o, _rehasher);
}

inline flatbuffers::Offset<CpuMsg> CreateCpuMsg(flatbuffers::FlatBufferBuilder &_fbb, const CpuMsgT *_o, const flatbuffers::rehasher_function_t *_rehasher) {
  (void)_rehasher;
  (void)_o;
  struct _VectorArgs { flatbuffers::FlatBufferBuilder *__fbb; const CpuMsgT* __o; const flatbuffers::rehasher_function_t *__rehasher; } _va = { &_fbb, _o, _rehasher}; (void)_va;
  auto _infos = _o->infos.size() ? _fbb.CreateVector<flatbuffers::Offset<cpu_monitor::msg::CpuInfo>> (_o->infos.size(), [](size_t i, _VectorArgs *__va) { return CreateCpuInfo(*__va->__fbb, __va->__o->infos[i].get(), __va->__rehasher); }, &_va ) : 0;
  return cpu_monitor::msg::CreateCpuMsg(
      _fbb,
      _infos);
}

inline const cpu_monitor::msg::CpuMsg *GetCpuMsg(const void *buf) {
  return flatbuffers::GetRoot<cpu_monitor::msg::CpuMsg>(buf);
}

inline const cpu_monitor::msg::CpuMsg *GetSizePrefixedCpuMsg(const void *buf) {
  return flatbuffers::GetSizePrefixedRoot<cpu_monitor::msg::CpuMsg>(buf);
}

inline bool VerifyCpuMsgBuffer(
    flatbuffers::Verifier &verifier) {
  return verifier.VerifyBuffer<cpu_monitor::msg::CpuMsg>(nullptr);
}

inline bool VerifySizePrefixedCpuMsgBuffer(
    flatbuffers::Verifier &verifier) {
  return verifier.VerifySizePrefixedBuffer<cpu_monitor::msg::CpuMsg>(nullptr);
}

inline void FinishCpuMsgBuffer(
    flatbuffers::FlatBufferBuilder &fbb,
    flatbuffers::Offset<cpu_monitor::msg::CpuMsg> root) {
  fbb.Finish(root);
}

inline void FinishSizePrefixedCpuMsgBuffer(
    flatbuffers::FlatBufferBuilder &fbb,
    flatbuffers::Offset<cpu_monitor::msg::CpuMsg> root) {
  fbb.FinishSizePrefixed(root);
}

inline std::unique_ptr<cpu_monitor::msg::CpuMsgT> UnPackCpuMsg(
    const void *buf,
    const flatbuffers::resolver_function_t *res = nullptr) {
  return std::unique_ptr<cpu_monitor::msg::CpuMsgT>(GetCpuMsg(buf)->UnPack(res));
}

inline std::unique_ptr<cpu_monitor::msg::CpuMsgT> UnPackSizePrefixedCpuMsg(
    const void *buf,
    const flatbuffers::resolver_function_t *res = nullptr) {
  return std::unique_ptr<cpu_monitor::msg::CpuMsgT>(GetSizePrefixedCpuMsg(buf)->UnPack(res));
}

}  // namespace msg
}  // namespace cpu_monitor

#endif  // FLATBUFFERS_GENERATED_CPUMSG_CPU_MONITOR_MSG_H_
