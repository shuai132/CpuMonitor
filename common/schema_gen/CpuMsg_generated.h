// automatically generated by the FlatBuffers compiler, do not modify


#ifndef FLATBUFFERS_GENERATED_CPUMSG_CPU_MONITOR_MSG_H_
#define FLATBUFFERS_GENERATED_CPUMSG_CPU_MONITOR_MSG_H_

#include "flatbuffers/flatbuffers.h"

// Ensure the included flatbuffers.h is the same version as when this file was
// generated, otherwise it may not be compatible.
static_assert(FLATBUFFERS_VERSION_MAJOR == 22 &&
              FLATBUFFERS_VERSION_MINOR == 9 &&
              FLATBUFFERS_VERSION_REVISION == 29,
             "Non-compatible flatbuffers version included");

namespace cpu_monitor {
namespace msg {

struct CpuInfo;
struct CpuInfoBuilder;

struct CpuMsg;
struct CpuMsgBuilder;

struct CpuInfo FLATBUFFERS_FINAL_CLASS : private flatbuffers::Table {
  typedef CpuInfoBuilder Builder;
  enum FlatBuffersVTableOffset FLATBUFFERS_VTABLE_UNDERLYING_TYPE {
    VT_NAME = 4,
    VT_USAGE = 6
  };
  const flatbuffers::String *name() const {
    return GetPointer<const flatbuffers::String *>(VT_NAME);
  }
  float usage() const {
    return GetField<float>(VT_USAGE, 0.0f);
  }
  bool Verify(flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyOffset(verifier, VT_NAME) &&
           verifier.VerifyString(name()) &&
           VerifyField<float>(verifier, VT_USAGE, 4) &&
           verifier.EndTable();
  }
};

struct CpuInfoBuilder {
  typedef CpuInfo Table;
  flatbuffers::FlatBufferBuilder &fbb_;
  flatbuffers::uoffset_t start_;
  void add_name(flatbuffers::Offset<flatbuffers::String> name) {
    fbb_.AddOffset(CpuInfo::VT_NAME, name);
  }
  void add_usage(float usage) {
    fbb_.AddElement<float>(CpuInfo::VT_USAGE, usage, 0.0f);
  }
  explicit CpuInfoBuilder(flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  flatbuffers::Offset<CpuInfo> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = flatbuffers::Offset<CpuInfo>(end);
    return o;
  }
};

inline flatbuffers::Offset<CpuInfo> CreateCpuInfo(
    flatbuffers::FlatBufferBuilder &_fbb,
    flatbuffers::Offset<flatbuffers::String> name = 0,
    float usage = 0.0f) {
  CpuInfoBuilder builder_(_fbb);
  builder_.add_usage(usage);
  builder_.add_name(name);
  return builder_.Finish();
}

inline flatbuffers::Offset<CpuInfo> CreateCpuInfoDirect(
    flatbuffers::FlatBufferBuilder &_fbb,
    const char *name = nullptr,
    float usage = 0.0f) {
  auto name__ = name ? _fbb.CreateString(name) : 0;
  return cpu_monitor::msg::CreateCpuInfo(
      _fbb,
      name__,
      usage);
}

struct CpuMsg FLATBUFFERS_FINAL_CLASS : private flatbuffers::Table {
  typedef CpuMsgBuilder Builder;
  enum FlatBuffersVTableOffset FLATBUFFERS_VTABLE_UNDERLYING_TYPE {
    VT_INFOS = 4
  };
  const flatbuffers::Vector<flatbuffers::Offset<cpu_monitor::msg::CpuInfo>> *infos() const {
    return GetPointer<const flatbuffers::Vector<flatbuffers::Offset<cpu_monitor::msg::CpuInfo>> *>(VT_INFOS);
  }
  bool Verify(flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyOffset(verifier, VT_INFOS) &&
           verifier.VerifyVector(infos()) &&
           verifier.VerifyVectorOfTables(infos()) &&
           verifier.EndTable();
  }
};

struct CpuMsgBuilder {
  typedef CpuMsg Table;
  flatbuffers::FlatBufferBuilder &fbb_;
  flatbuffers::uoffset_t start_;
  void add_infos(flatbuffers::Offset<flatbuffers::Vector<flatbuffers::Offset<cpu_monitor::msg::CpuInfo>>> infos) {
    fbb_.AddOffset(CpuMsg::VT_INFOS, infos);
  }
  explicit CpuMsgBuilder(flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  flatbuffers::Offset<CpuMsg> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = flatbuffers::Offset<CpuMsg>(end);
    return o;
  }
};

inline flatbuffers::Offset<CpuMsg> CreateCpuMsg(
    flatbuffers::FlatBufferBuilder &_fbb,
    flatbuffers::Offset<flatbuffers::Vector<flatbuffers::Offset<cpu_monitor::msg::CpuInfo>>> infos = 0) {
  CpuMsgBuilder builder_(_fbb);
  builder_.add_infos(infos);
  return builder_.Finish();
}

inline flatbuffers::Offset<CpuMsg> CreateCpuMsgDirect(
    flatbuffers::FlatBufferBuilder &_fbb,
    const std::vector<flatbuffers::Offset<cpu_monitor::msg::CpuInfo>> *infos = nullptr) {
  auto infos__ = infos ? _fbb.CreateVector<flatbuffers::Offset<cpu_monitor::msg::CpuInfo>>(*infos) : 0;
  return cpu_monitor::msg::CreateCpuMsg(
      _fbb,
      infos__);
}

inline const cpu_monitor::msg::CpuMsg *GetCpuMsg(const void *buf) {
  return flatbuffers::GetRoot<cpu_monitor::msg::CpuMsg>(buf);
}

inline const cpu_monitor::msg::CpuMsg *GetSizePrefixedCpuMsg(const void *buf) {
  return flatbuffers::GetSizePrefixedRoot<cpu_monitor::msg::CpuMsg>(buf);
}

inline bool VerifyCpuMsgBuffer(
    flatbuffers::Verifier &verifier) {
  return verifier.VerifyBuffer<cpu_monitor::msg::CpuMsg>(nullptr);
}

inline bool VerifySizePrefixedCpuMsgBuffer(
    flatbuffers::Verifier &verifier) {
  return verifier.VerifySizePrefixedBuffer<cpu_monitor::msg::CpuMsg>(nullptr);
}

inline void FinishCpuMsgBuffer(
    flatbuffers::FlatBufferBuilder &fbb,
    flatbuffers::Offset<cpu_monitor::msg::CpuMsg> root) {
  fbb.Finish(root);
}

inline void FinishSizePrefixedCpuMsgBuffer(
    flatbuffers::FlatBufferBuilder &fbb,
    flatbuffers::Offset<cpu_monitor::msg::CpuMsg> root) {
  fbb.FinishSizePrefixed(root);
}

}  // namespace msg
}  // namespace cpu_monitor

#endif  // FLATBUFFERS_GENERATED_CPUMSG_CPU_MONITOR_MSG_H_
