// automatically generated by the FlatBuffers compiler, do not modify


#ifndef FLATBUFFERS_GENERATED_PROCESSMSG_CPU_MONITOR_MSG_H_
#define FLATBUFFERS_GENERATED_PROCESSMSG_CPU_MONITOR_MSG_H_

#include "flatbuffers/flatbuffers.h"

// Ensure the included flatbuffers.h is the same version as when this file was
// generated, otherwise it may not be compatible.
static_assert(FLATBUFFERS_VERSION_MAJOR == 22 &&
              FLATBUFFERS_VERSION_MINOR == 9 &&
              FLATBUFFERS_VERSION_REVISION == 29,
             "Non-compatible flatbuffers version included");

namespace cpu_monitor {
namespace msg {

struct ThreadInfo;
struct ThreadInfoBuilder;
struct ThreadInfoT;

struct MemInfo;
struct MemInfoBuilder;
struct MemInfoT;

struct ProcessInfo;
struct ProcessInfoBuilder;
struct ProcessInfoT;

struct ProcessMsg;
struct ProcessMsgBuilder;
struct ProcessMsgT;

struct ThreadInfoT : public flatbuffers::NativeTable {
  typedef ThreadInfo TableType;
  std::string name{};
  uint64_t id = 0;
  float usage = 0.0f;
  uint64_t timestamps = 0;
};

struct ThreadInfo FLATBUFFERS_FINAL_CLASS : private flatbuffers::Table {
  typedef ThreadInfoT NativeTableType;
  typedef ThreadInfoBuilder Builder;
  enum FlatBuffersVTableOffset FLATBUFFERS_VTABLE_UNDERLYING_TYPE {
    VT_NAME = 4,
    VT_ID = 6,
    VT_USAGE = 8,
    VT_TIMESTAMPS = 10
  };
  const flatbuffers::String *name() const {
    return GetPointer<const flatbuffers::String *>(VT_NAME);
  }
  uint64_t id() const {
    return GetField<uint64_t>(VT_ID, 0);
  }
  float usage() const {
    return GetField<float>(VT_USAGE, 0.0f);
  }
  uint64_t timestamps() const {
    return GetField<uint64_t>(VT_TIMESTAMPS, 0);
  }
  bool Verify(flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyOffset(verifier, VT_NAME) &&
           verifier.VerifyString(name()) &&
           VerifyField<uint64_t>(verifier, VT_ID, 8) &&
           VerifyField<float>(verifier, VT_USAGE, 4) &&
           VerifyField<uint64_t>(verifier, VT_TIMESTAMPS, 8) &&
           verifier.EndTable();
  }
  ThreadInfoT *UnPack(const flatbuffers::resolver_function_t *_resolver = nullptr) const;
  void UnPackTo(ThreadInfoT *_o, const flatbuffers::resolver_function_t *_resolver = nullptr) const;
  static flatbuffers::Offset<ThreadInfo> Pack(flatbuffers::FlatBufferBuilder &_fbb, const ThreadInfoT* _o, const flatbuffers::rehasher_function_t *_rehasher = nullptr);
};

struct ThreadInfoBuilder {
  typedef ThreadInfo Table;
  flatbuffers::FlatBufferBuilder &fbb_;
  flatbuffers::uoffset_t start_;
  void add_name(flatbuffers::Offset<flatbuffers::String> name) {
    fbb_.AddOffset(ThreadInfo::VT_NAME, name);
  }
  void add_id(uint64_t id) {
    fbb_.AddElement<uint64_t>(ThreadInfo::VT_ID, id, 0);
  }
  void add_usage(float usage) {
    fbb_.AddElement<float>(ThreadInfo::VT_USAGE, usage, 0.0f);
  }
  void add_timestamps(uint64_t timestamps) {
    fbb_.AddElement<uint64_t>(ThreadInfo::VT_TIMESTAMPS, timestamps, 0);
  }
  explicit ThreadInfoBuilder(flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  flatbuffers::Offset<ThreadInfo> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = flatbuffers::Offset<ThreadInfo>(end);
    return o;
  }
};

inline flatbuffers::Offset<ThreadInfo> CreateThreadInfo(
    flatbuffers::FlatBufferBuilder &_fbb,
    flatbuffers::Offset<flatbuffers::String> name = 0,
    uint64_t id = 0,
    float usage = 0.0f,
    uint64_t timestamps = 0) {
  ThreadInfoBuilder builder_(_fbb);
  builder_.add_timestamps(timestamps);
  builder_.add_id(id);
  builder_.add_usage(usage);
  builder_.add_name(name);
  return builder_.Finish();
}

inline flatbuffers::Offset<ThreadInfo> CreateThreadInfoDirect(
    flatbuffers::FlatBufferBuilder &_fbb,
    const char *name = nullptr,
    uint64_t id = 0,
    float usage = 0.0f,
    uint64_t timestamps = 0) {
  auto name__ = name ? _fbb.CreateString(name) : 0;
  return cpu_monitor::msg::CreateThreadInfo(
      _fbb,
      name__,
      id,
      usage,
      timestamps);
}

flatbuffers::Offset<ThreadInfo> CreateThreadInfo(flatbuffers::FlatBufferBuilder &_fbb, const ThreadInfoT *_o, const flatbuffers::rehasher_function_t *_rehasher = nullptr);

struct MemInfoT : public flatbuffers::NativeTable {
  typedef MemInfo TableType;
  uint64_t peak = 0;
  uint64_t size = 0;
  uint64_t hwm = 0;
  uint64_t rss = 0;
  uint64_t timestamps = 0;
};

struct MemInfo FLATBUFFERS_FINAL_CLASS : private flatbuffers::Table {
  typedef MemInfoT NativeTableType;
  typedef MemInfoBuilder Builder;
  enum FlatBuffersVTableOffset FLATBUFFERS_VTABLE_UNDERLYING_TYPE {
    VT_PEAK = 4,
    VT_SIZE = 6,
    VT_HWM = 8,
    VT_RSS = 10,
    VT_TIMESTAMPS = 12
  };
  uint64_t peak() const {
    return GetField<uint64_t>(VT_PEAK, 0);
  }
  uint64_t size() const {
    return GetField<uint64_t>(VT_SIZE, 0);
  }
  uint64_t hwm() const {
    return GetField<uint64_t>(VT_HWM, 0);
  }
  uint64_t rss() const {
    return GetField<uint64_t>(VT_RSS, 0);
  }
  uint64_t timestamps() const {
    return GetField<uint64_t>(VT_TIMESTAMPS, 0);
  }
  bool Verify(flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyField<uint64_t>(verifier, VT_PEAK, 8) &&
           VerifyField<uint64_t>(verifier, VT_SIZE, 8) &&
           VerifyField<uint64_t>(verifier, VT_HWM, 8) &&
           VerifyField<uint64_t>(verifier, VT_RSS, 8) &&
           VerifyField<uint64_t>(verifier, VT_TIMESTAMPS, 8) &&
           verifier.EndTable();
  }
  MemInfoT *UnPack(const flatbuffers::resolver_function_t *_resolver = nullptr) const;
  void UnPackTo(MemInfoT *_o, const flatbuffers::resolver_function_t *_resolver = nullptr) const;
  static flatbuffers::Offset<MemInfo> Pack(flatbuffers::FlatBufferBuilder &_fbb, const MemInfoT* _o, const flatbuffers::rehasher_function_t *_rehasher = nullptr);
};

struct MemInfoBuilder {
  typedef MemInfo Table;
  flatbuffers::FlatBufferBuilder &fbb_;
  flatbuffers::uoffset_t start_;
  void add_peak(uint64_t peak) {
    fbb_.AddElement<uint64_t>(MemInfo::VT_PEAK, peak, 0);
  }
  void add_size(uint64_t size) {
    fbb_.AddElement<uint64_t>(MemInfo::VT_SIZE, size, 0);
  }
  void add_hwm(uint64_t hwm) {
    fbb_.AddElement<uint64_t>(MemInfo::VT_HWM, hwm, 0);
  }
  void add_rss(uint64_t rss) {
    fbb_.AddElement<uint64_t>(MemInfo::VT_RSS, rss, 0);
  }
  void add_timestamps(uint64_t timestamps) {
    fbb_.AddElement<uint64_t>(MemInfo::VT_TIMESTAMPS, timestamps, 0);
  }
  explicit MemInfoBuilder(flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  flatbuffers::Offset<MemInfo> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = flatbuffers::Offset<MemInfo>(end);
    return o;
  }
};

inline flatbuffers::Offset<MemInfo> CreateMemInfo(
    flatbuffers::FlatBufferBuilder &_fbb,
    uint64_t peak = 0,
    uint64_t size = 0,
    uint64_t hwm = 0,
    uint64_t rss = 0,
    uint64_t timestamps = 0) {
  MemInfoBuilder builder_(_fbb);
  builder_.add_timestamps(timestamps);
  builder_.add_rss(rss);
  builder_.add_hwm(hwm);
  builder_.add_size(size);
  builder_.add_peak(peak);
  return builder_.Finish();
}

flatbuffers::Offset<MemInfo> CreateMemInfo(flatbuffers::FlatBufferBuilder &_fbb, const MemInfoT *_o, const flatbuffers::rehasher_function_t *_rehasher = nullptr);

struct ProcessInfoT : public flatbuffers::NativeTable {
  typedef ProcessInfo TableType;
  uint64_t id = 0;
  std::string name{};
  std::vector<std::unique_ptr<cpu_monitor::msg::ThreadInfoT>> thread_infos{};
  std::unique_ptr<cpu_monitor::msg::MemInfoT> mem_info{};
  ProcessInfoT() = default;
  ProcessInfoT(const ProcessInfoT &o);
  ProcessInfoT(ProcessInfoT&&) FLATBUFFERS_NOEXCEPT = default;
  ProcessInfoT &operator=(ProcessInfoT o) FLATBUFFERS_NOEXCEPT;
};

struct ProcessInfo FLATBUFFERS_FINAL_CLASS : private flatbuffers::Table {
  typedef ProcessInfoT NativeTableType;
  typedef ProcessInfoBuilder Builder;
  enum FlatBuffersVTableOffset FLATBUFFERS_VTABLE_UNDERLYING_TYPE {
    VT_ID = 4,
    VT_NAME = 6,
    VT_THREAD_INFOS = 8,
    VT_MEM_INFO = 10
  };
  uint64_t id() const {
    return GetField<uint64_t>(VT_ID, 0);
  }
  const flatbuffers::String *name() const {
    return GetPointer<const flatbuffers::String *>(VT_NAME);
  }
  const flatbuffers::Vector<flatbuffers::Offset<cpu_monitor::msg::ThreadInfo>> *thread_infos() const {
    return GetPointer<const flatbuffers::Vector<flatbuffers::Offset<cpu_monitor::msg::ThreadInfo>> *>(VT_THREAD_INFOS);
  }
  const cpu_monitor::msg::MemInfo *mem_info() const {
    return GetPointer<const cpu_monitor::msg::MemInfo *>(VT_MEM_INFO);
  }
  bool Verify(flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyField<uint64_t>(verifier, VT_ID, 8) &&
           VerifyOffset(verifier, VT_NAME) &&
           verifier.VerifyString(name()) &&
           VerifyOffset(verifier, VT_THREAD_INFOS) &&
           verifier.VerifyVector(thread_infos()) &&
           verifier.VerifyVectorOfTables(thread_infos()) &&
           VerifyOffset(verifier, VT_MEM_INFO) &&
           verifier.VerifyTable(mem_info()) &&
           verifier.EndTable();
  }
  ProcessInfoT *UnPack(const flatbuffers::resolver_function_t *_resolver = nullptr) const;
  void UnPackTo(ProcessInfoT *_o, const flatbuffers::resolver_function_t *_resolver = nullptr) const;
  static flatbuffers::Offset<ProcessInfo> Pack(flatbuffers::FlatBufferBuilder &_fbb, const ProcessInfoT* _o, const flatbuffers::rehasher_function_t *_rehasher = nullptr);
};

struct ProcessInfoBuilder {
  typedef ProcessInfo Table;
  flatbuffers::FlatBufferBuilder &fbb_;
  flatbuffers::uoffset_t start_;
  void add_id(uint64_t id) {
    fbb_.AddElement<uint64_t>(ProcessInfo::VT_ID, id, 0);
  }
  void add_name(flatbuffers::Offset<flatbuffers::String> name) {
    fbb_.AddOffset(ProcessInfo::VT_NAME, name);
  }
  void add_thread_infos(flatbuffers::Offset<flatbuffers::Vector<flatbuffers::Offset<cpu_monitor::msg::ThreadInfo>>> thread_infos) {
    fbb_.AddOffset(ProcessInfo::VT_THREAD_INFOS, thread_infos);
  }
  void add_mem_info(flatbuffers::Offset<cpu_monitor::msg::MemInfo> mem_info) {
    fbb_.AddOffset(ProcessInfo::VT_MEM_INFO, mem_info);
  }
  explicit ProcessInfoBuilder(flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  flatbuffers::Offset<ProcessInfo> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = flatbuffers::Offset<ProcessInfo>(end);
    return o;
  }
};

inline flatbuffers::Offset<ProcessInfo> CreateProcessInfo(
    flatbuffers::FlatBufferBuilder &_fbb,
    uint64_t id = 0,
    flatbuffers::Offset<flatbuffers::String> name = 0,
    flatbuffers::Offset<flatbuffers::Vector<flatbuffers::Offset<cpu_monitor::msg::ThreadInfo>>> thread_infos = 0,
    flatbuffers::Offset<cpu_monitor::msg::MemInfo> mem_info = 0) {
  ProcessInfoBuilder builder_(_fbb);
  builder_.add_id(id);
  builder_.add_mem_info(mem_info);
  builder_.add_thread_infos(thread_infos);
  builder_.add_name(name);
  return builder_.Finish();
}

inline flatbuffers::Offset<ProcessInfo> CreateProcessInfoDirect(
    flatbuffers::FlatBufferBuilder &_fbb,
    uint64_t id = 0,
    const char *name = nullptr,
    const std::vector<flatbuffers::Offset<cpu_monitor::msg::ThreadInfo>> *thread_infos = nullptr,
    flatbuffers::Offset<cpu_monitor::msg::MemInfo> mem_info = 0) {
  auto name__ = name ? _fbb.CreateString(name) : 0;
  auto thread_infos__ = thread_infos ? _fbb.CreateVector<flatbuffers::Offset<cpu_monitor::msg::ThreadInfo>>(*thread_infos) : 0;
  return cpu_monitor::msg::CreateProcessInfo(
      _fbb,
      id,
      name__,
      thread_infos__,
      mem_info);
}

flatbuffers::Offset<ProcessInfo> CreateProcessInfo(flatbuffers::FlatBufferBuilder &_fbb, const ProcessInfoT *_o, const flatbuffers::rehasher_function_t *_rehasher = nullptr);

struct ProcessMsgT : public flatbuffers::NativeTable {
  typedef ProcessMsg TableType;
  std::vector<std::unique_ptr<cpu_monitor::msg::ProcessInfoT>> infos{};
  uint64_t timestamps = 0;
  ProcessMsgT() = default;
  ProcessMsgT(const ProcessMsgT &o);
  ProcessMsgT(ProcessMsgT&&) FLATBUFFERS_NOEXCEPT = default;
  ProcessMsgT &operator=(ProcessMsgT o) FLATBUFFERS_NOEXCEPT;
};

struct ProcessMsg FLATBUFFERS_FINAL_CLASS : private flatbuffers::Table {
  typedef ProcessMsgT NativeTableType;
  typedef ProcessMsgBuilder Builder;
  enum FlatBuffersVTableOffset FLATBUFFERS_VTABLE_UNDERLYING_TYPE {
    VT_INFOS = 4,
    VT_TIMESTAMPS = 6
  };
  const flatbuffers::Vector<flatbuffers::Offset<cpu_monitor::msg::ProcessInfo>> *infos() const {
    return GetPointer<const flatbuffers::Vector<flatbuffers::Offset<cpu_monitor::msg::ProcessInfo>> *>(VT_INFOS);
  }
  uint64_t timestamps() const {
    return GetField<uint64_t>(VT_TIMESTAMPS, 0);
  }
  bool Verify(flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyOffset(verifier, VT_INFOS) &&
           verifier.VerifyVector(infos()) &&
           verifier.VerifyVectorOfTables(infos()) &&
           VerifyField<uint64_t>(verifier, VT_TIMESTAMPS, 8) &&
           verifier.EndTable();
  }
  ProcessMsgT *UnPack(const flatbuffers::resolver_function_t *_resolver = nullptr) const;
  void UnPackTo(ProcessMsgT *_o, const flatbuffers::resolver_function_t *_resolver = nullptr) const;
  static flatbuffers::Offset<ProcessMsg> Pack(flatbuffers::FlatBufferBuilder &_fbb, const ProcessMsgT* _o, const flatbuffers::rehasher_function_t *_rehasher = nullptr);
};

struct ProcessMsgBuilder {
  typedef ProcessMsg Table;
  flatbuffers::FlatBufferBuilder &fbb_;
  flatbuffers::uoffset_t start_;
  void add_infos(flatbuffers::Offset<flatbuffers::Vector<flatbuffers::Offset<cpu_monitor::msg::ProcessInfo>>> infos) {
    fbb_.AddOffset(ProcessMsg::VT_INFOS, infos);
  }
  void add_timestamps(uint64_t timestamps) {
    fbb_.AddElement<uint64_t>(ProcessMsg::VT_TIMESTAMPS, timestamps, 0);
  }
  explicit ProcessMsgBuilder(flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  flatbuffers::Offset<ProcessMsg> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = flatbuffers::Offset<ProcessMsg>(end);
    return o;
  }
};

inline flatbuffers::Offset<ProcessMsg> CreateProcessMsg(
    flatbuffers::FlatBufferBuilder &_fbb,
    flatbuffers::Offset<flatbuffers::Vector<flatbuffers::Offset<cpu_monitor::msg::ProcessInfo>>> infos = 0,
    uint64_t timestamps = 0) {
  ProcessMsgBuilder builder_(_fbb);
  builder_.add_timestamps(timestamps);
  builder_.add_infos(infos);
  return builder_.Finish();
}

inline flatbuffers::Offset<ProcessMsg> CreateProcessMsgDirect(
    flatbuffers::FlatBufferBuilder &_fbb,
    const std::vector<flatbuffers::Offset<cpu_monitor::msg::ProcessInfo>> *infos = nullptr,
    uint64_t timestamps = 0) {
  auto infos__ = infos ? _fbb.CreateVector<flatbuffers::Offset<cpu_monitor::msg::ProcessInfo>>(*infos) : 0;
  return cpu_monitor::msg::CreateProcessMsg(
      _fbb,
      infos__,
      timestamps);
}

flatbuffers::Offset<ProcessMsg> CreateProcessMsg(flatbuffers::FlatBufferBuilder &_fbb, const ProcessMsgT *_o, const flatbuffers::rehasher_function_t *_rehasher = nullptr);

inline ThreadInfoT *ThreadInfo::UnPack(const flatbuffers::resolver_function_t *_resolver) const {
  auto _o = std::unique_ptr<ThreadInfoT>(new ThreadInfoT());
  UnPackTo(_o.get(), _resolver);
  return _o.release();
}

inline void ThreadInfo::UnPackTo(ThreadInfoT *_o, const flatbuffers::resolver_function_t *_resolver) const {
  (void)_o;
  (void)_resolver;
  { auto _e = name(); if (_e) _o->name = _e->str(); }
  { auto _e = id(); _o->id = _e; }
  { auto _e = usage(); _o->usage = _e; }
  { auto _e = timestamps(); _o->timestamps = _e; }
}

inline flatbuffers::Offset<ThreadInfo> ThreadInfo::Pack(flatbuffers::FlatBufferBuilder &_fbb, const ThreadInfoT* _o, const flatbuffers::rehasher_function_t *_rehasher) {
  return CreateThreadInfo(_fbb, _o, _rehasher);
}

inline flatbuffers::Offset<ThreadInfo> CreateThreadInfo(flatbuffers::FlatBufferBuilder &_fbb, const ThreadInfoT *_o, const flatbuffers::rehasher_function_t *_rehasher) {
  (void)_rehasher;
  (void)_o;
  struct _VectorArgs { flatbuffers::FlatBufferBuilder *__fbb; const ThreadInfoT* __o; const flatbuffers::rehasher_function_t *__rehasher; } _va = { &_fbb, _o, _rehasher}; (void)_va;
  auto _name = _o->name.empty() ? 0 : _fbb.CreateString(_o->name);
  auto _id = _o->id;
  auto _usage = _o->usage;
  auto _timestamps = _o->timestamps;
  return cpu_monitor::msg::CreateThreadInfo(
      _fbb,
      _name,
      _id,
      _usage,
      _timestamps);
}

inline MemInfoT *MemInfo::UnPack(const flatbuffers::resolver_function_t *_resolver) const {
  auto _o = std::unique_ptr<MemInfoT>(new MemInfoT());
  UnPackTo(_o.get(), _resolver);
  return _o.release();
}

inline void MemInfo::UnPackTo(MemInfoT *_o, const flatbuffers::resolver_function_t *_resolver) const {
  (void)_o;
  (void)_resolver;
  { auto _e = peak(); _o->peak = _e; }
  { auto _e = size(); _o->size = _e; }
  { auto _e = hwm(); _o->hwm = _e; }
  { auto _e = rss(); _o->rss = _e; }
  { auto _e = timestamps(); _o->timestamps = _e; }
}

inline flatbuffers::Offset<MemInfo> MemInfo::Pack(flatbuffers::FlatBufferBuilder &_fbb, const MemInfoT* _o, const flatbuffers::rehasher_function_t *_rehasher) {
  return CreateMemInfo(_fbb, _o, _rehasher);
}

inline flatbuffers::Offset<MemInfo> CreateMemInfo(flatbuffers::FlatBufferBuilder &_fbb, const MemInfoT *_o, const flatbuffers::rehasher_function_t *_rehasher) {
  (void)_rehasher;
  (void)_o;
  struct _VectorArgs { flatbuffers::FlatBufferBuilder *__fbb; const MemInfoT* __o; const flatbuffers::rehasher_function_t *__rehasher; } _va = { &_fbb, _o, _rehasher}; (void)_va;
  auto _peak = _o->peak;
  auto _size = _o->size;
  auto _hwm = _o->hwm;
  auto _rss = _o->rss;
  auto _timestamps = _o->timestamps;
  return cpu_monitor::msg::CreateMemInfo(
      _fbb,
      _peak,
      _size,
      _hwm,
      _rss,
      _timestamps);
}

inline ProcessInfoT::ProcessInfoT(const ProcessInfoT &o)
      : id(o.id),
        name(o.name),
        mem_info((o.mem_info) ? new cpu_monitor::msg::MemInfoT(*o.mem_info) : nullptr) {
  thread_infos.reserve(o.thread_infos.size());
  for (const auto &thread_infos_ : o.thread_infos) { thread_infos.emplace_back((thread_infos_) ? new cpu_monitor::msg::ThreadInfoT(*thread_infos_) : nullptr); }
}

inline ProcessInfoT &ProcessInfoT::operator=(ProcessInfoT o) FLATBUFFERS_NOEXCEPT {
  std::swap(id, o.id);
  std::swap(name, o.name);
  std::swap(thread_infos, o.thread_infos);
  std::swap(mem_info, o.mem_info);
  return *this;
}

inline ProcessInfoT *ProcessInfo::UnPack(const flatbuffers::resolver_function_t *_resolver) const {
  auto _o = std::unique_ptr<ProcessInfoT>(new ProcessInfoT());
  UnPackTo(_o.get(), _resolver);
  return _o.release();
}

inline void ProcessInfo::UnPackTo(ProcessInfoT *_o, const flatbuffers::resolver_function_t *_resolver) const {
  (void)_o;
  (void)_resolver;
  { auto _e = id(); _o->id = _e; }
  { auto _e = name(); if (_e) _o->name = _e->str(); }
  { auto _e = thread_infos(); if (_e) { _o->thread_infos.resize(_e->size()); for (flatbuffers::uoffset_t _i = 0; _i < _e->size(); _i++) { if(_o->thread_infos[_i]) { _e->Get(_i)->UnPackTo(_o->thread_infos[_i].get(), _resolver); } else { _o->thread_infos[_i] = std::unique_ptr<cpu_monitor::msg::ThreadInfoT>(_e->Get(_i)->UnPack(_resolver)); }; } } else { _o->thread_infos.resize(0); } }
  { auto _e = mem_info(); if (_e) { if(_o->mem_info) { _e->UnPackTo(_o->mem_info.get(), _resolver); } else { _o->mem_info = std::unique_ptr<cpu_monitor::msg::MemInfoT>(_e->UnPack(_resolver)); } } else if (_o->mem_info) { _o->mem_info.reset(); } }
}

inline flatbuffers::Offset<ProcessInfo> ProcessInfo::Pack(flatbuffers::FlatBufferBuilder &_fbb, const ProcessInfoT* _o, const flatbuffers::rehasher_function_t *_rehasher) {
  return CreateProcessInfo(_fbb, _o, _rehasher);
}

inline flatbuffers::Offset<ProcessInfo> CreateProcessInfo(flatbuffers::FlatBufferBuilder &_fbb, const ProcessInfoT *_o, const flatbuffers::rehasher_function_t *_rehasher) {
  (void)_rehasher;
  (void)_o;
  struct _VectorArgs { flatbuffers::FlatBufferBuilder *__fbb; const ProcessInfoT* __o; const flatbuffers::rehasher_function_t *__rehasher; } _va = { &_fbb, _o, _rehasher}; (void)_va;
  auto _id = _o->id;
  auto _name = _o->name.empty() ? 0 : _fbb.CreateString(_o->name);
  auto _thread_infos = _o->thread_infos.size() ? _fbb.CreateVector<flatbuffers::Offset<cpu_monitor::msg::ThreadInfo>> (_o->thread_infos.size(), [](size_t i, _VectorArgs *__va) { return CreateThreadInfo(*__va->__fbb, __va->__o->thread_infos[i].get(), __va->__rehasher); }, &_va ) : 0;
  auto _mem_info = _o->mem_info ? CreateMemInfo(_fbb, _o->mem_info.get(), _rehasher) : 0;
  return cpu_monitor::msg::CreateProcessInfo(
      _fbb,
      _id,
      _name,
      _thread_infos,
      _mem_info);
}

inline ProcessMsgT::ProcessMsgT(const ProcessMsgT &o)
      : timestamps(o.timestamps) {
  infos.reserve(o.infos.size());
  for (const auto &infos_ : o.infos) { infos.emplace_back((infos_) ? new cpu_monitor::msg::ProcessInfoT(*infos_) : nullptr); }
}

inline ProcessMsgT &ProcessMsgT::operator=(ProcessMsgT o) FLATBUFFERS_NOEXCEPT {
  std::swap(infos, o.infos);
  std::swap(timestamps, o.timestamps);
  return *this;
}

inline ProcessMsgT *ProcessMsg::UnPack(const flatbuffers::resolver_function_t *_resolver) const {
  auto _o = std::unique_ptr<ProcessMsgT>(new ProcessMsgT());
  UnPackTo(_o.get(), _resolver);
  return _o.release();
}

inline void ProcessMsg::UnPackTo(ProcessMsgT *_o, const flatbuffers::resolver_function_t *_resolver) const {
  (void)_o;
  (void)_resolver;
  { auto _e = infos(); if (_e) { _o->infos.resize(_e->size()); for (flatbuffers::uoffset_t _i = 0; _i < _e->size(); _i++) { if(_o->infos[_i]) { _e->Get(_i)->UnPackTo(_o->infos[_i].get(), _resolver); } else { _o->infos[_i] = std::unique_ptr<cpu_monitor::msg::ProcessInfoT>(_e->Get(_i)->UnPack(_resolver)); }; } } else { _o->infos.resize(0); } }
  { auto _e = timestamps(); _o->timestamps = _e; }
}

inline flatbuffers::Offset<ProcessMsg> ProcessMsg::Pack(flatbuffers::FlatBufferBuilder &_fbb, const ProcessMsgT* _o, const flatbuffers::rehasher_function_t *_rehasher) {
  return CreateProcessMsg(_fbb, _o, _rehasher);
}

inline flatbuffers::Offset<ProcessMsg> CreateProcessMsg(flatbuffers::FlatBufferBuilder &_fbb, const ProcessMsgT *_o, const flatbuffers::rehasher_function_t *_rehasher) {
  (void)_rehasher;
  (void)_o;
  struct _VectorArgs { flatbuffers::FlatBufferBuilder *__fbb; const ProcessMsgT* __o; const flatbuffers::rehasher_function_t *__rehasher; } _va = { &_fbb, _o, _rehasher}; (void)_va;
  auto _infos = _o->infos.size() ? _fbb.CreateVector<flatbuffers::Offset<cpu_monitor::msg::ProcessInfo>> (_o->infos.size(), [](size_t i, _VectorArgs *__va) { return CreateProcessInfo(*__va->__fbb, __va->__o->infos[i].get(), __va->__rehasher); }, &_va ) : 0;
  auto _timestamps = _o->timestamps;
  return cpu_monitor::msg::CreateProcessMsg(
      _fbb,
      _infos,
      _timestamps);
}

inline const cpu_monitor::msg::ProcessMsg *GetProcessMsg(const void *buf) {
  return flatbuffers::GetRoot<cpu_monitor::msg::ProcessMsg>(buf);
}

inline const cpu_monitor::msg::ProcessMsg *GetSizePrefixedProcessMsg(const void *buf) {
  return flatbuffers::GetSizePrefixedRoot<cpu_monitor::msg::ProcessMsg>(buf);
}

inline bool VerifyProcessMsgBuffer(
    flatbuffers::Verifier &verifier) {
  return verifier.VerifyBuffer<cpu_monitor::msg::ProcessMsg>(nullptr);
}

inline bool VerifySizePrefixedProcessMsgBuffer(
    flatbuffers::Verifier &verifier) {
  return verifier.VerifySizePrefixedBuffer<cpu_monitor::msg::ProcessMsg>(nullptr);
}

inline void FinishProcessMsgBuffer(
    flatbuffers::FlatBufferBuilder &fbb,
    flatbuffers::Offset<cpu_monitor::msg::ProcessMsg> root) {
  fbb.Finish(root);
}

inline void FinishSizePrefixedProcessMsgBuffer(
    flatbuffers::FlatBufferBuilder &fbb,
    flatbuffers::Offset<cpu_monitor::msg::ProcessMsg> root) {
  fbb.FinishSizePrefixed(root);
}

inline std::unique_ptr<cpu_monitor::msg::ProcessMsgT> UnPackProcessMsg(
    const void *buf,
    const flatbuffers::resolver_function_t *res = nullptr) {
  return std::unique_ptr<cpu_monitor::msg::ProcessMsgT>(GetProcessMsg(buf)->UnPack(res));
}

inline std::unique_ptr<cpu_monitor::msg::ProcessMsgT> UnPackSizePrefixedProcessMsg(
    const void *buf,
    const flatbuffers::resolver_function_t *res = nullptr) {
  return std::unique_ptr<cpu_monitor::msg::ProcessMsgT>(GetSizePrefixedProcessMsg(buf)->UnPack(res));
}

}  // namespace msg
}  // namespace cpu_monitor

#endif  // FLATBUFFERS_GENERATED_PROCESSMSG_CPU_MONITOR_MSG_H_
